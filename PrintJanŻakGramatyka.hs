{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintJanŻakGramatyka where

-- pretty-printer generated by the BNF converter

import AbsJanŻakGramatyka
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print (Program a) where
  prt i e = case e of
    ProgramDef _ funcdecls -> prPrec i 0 (concatD [prt 0 funcdecls])

instance Print (FuncDecl a) where
  prt i e = case e of
    FunDef _ type_ id args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Arg a) where
  prt i e = case e of
    ArgDef _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Stmt a) where
  prt i e = case e of
    FunToStmt _ funcdecl -> prPrec i 0 (concatD [prt 0 funcdecl])
    EmptySt _ -> prPrec i 0 (concatD [doc (showString ";")])
    StmToB _ block -> prPrec i 0 (concatD [prt 0 block])
    Decl _ type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    ModToStmt _ modifystmt -> prPrec i 0 (concatD [prt 0 modifystmt, doc (showString ";")])
    Ret _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    VRet _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    If _ expr block -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    IfElse _ expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block1, doc (showString "else"), prt 0 block2])
    While _ expr block -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    ForPscl _ id expr1 expr2 block -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 id, doc (showString "="), prt 0 expr1, doc (showString "to"), prt 0 expr2, doc (showString ")"), prt 0 block])
    SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    Break _ -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    Continue _ -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (ExpIdent a) where
  prt i e = case e of
    ArrIdent _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 expr, doc (showString "]")])
    NormalIdent _ id -> prPrec i 0 (concatD [prt 0 id])

instance Print (Block a) where
  prt i e = case e of
    BlockDef _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Item a) where
  prt i e = case e of
    Init _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
    EmpInit _ id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (ModifyStmt a) where
  prt i e = case e of
    Assign _ expident expr -> prPrec i 0 (concatD [prt 0 expident, doc (showString "="), prt 0 expr])
    Incr _ expident -> prPrec i 0 (concatD [prt 0 expident, doc (showString "++")])
    Decr _ expident -> prPrec i 0 (concatD [prt 0 expident, doc (showString "--")])

instance Print (Type a) where
  prt i e = case e of
    Int _ -> prPrec i 0 (concatD [doc (showString "int")])
    Str _ -> prPrec i 0 (concatD [doc (showString "string")])
    Bool _ -> prPrec i 0 (concatD [doc (showString "boolean")])
    Void _ -> prPrec i 0 (concatD [doc (showString "void")])
    Array _ type_ expr -> prPrec i 0 (concatD [prt 0 type_, doc (showString "["), prt 0 expr, doc (showString "]")])

instance Print (Expr a) where
  prt i e = case e of
    EVar _ expident -> prPrec i 6 (concatD [prt 0 expident])
    ELitInt _ n -> prPrec i 6 (concatD [prt 0 n])
    ELitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    ELitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    EApp _ id exprs -> prPrec i 6 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    EString _ str -> prPrec i 6 (concatD [prt 0 str])
    Neg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    Not _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    EMul _ expr1 strop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 strop, prt 5 expr2])
    EAdd _ expr1 weakop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 weakop, prt 4 expr2])
    ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (WeakOp a) where
  prt i e = case e of
    Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (StrOp a) where
  prt i e = case e of
    Mul _ -> prPrec i 0 (concatD [doc (showString "*")])
    Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (RelOp a) where
  prt i e = case e of
    Less _ -> prPrec i 0 (concatD [doc (showString "<")])
    LessOrEq _ -> prPrec i 0 (concatD [doc (showString "<=")])
    Greater _ -> prPrec i 0 (concatD [doc (showString ">")])
    GrtOrEq _ -> prPrec i 0 (concatD [doc (showString ">=")])
    Eq _ -> prPrec i 0 (concatD [doc (showString "==")])
    NotEq _ -> prPrec i 0 (concatD [doc (showString "!=")])


