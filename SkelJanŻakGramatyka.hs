module SkelJanÅ»akGramatyka where

-- Haskell module generated by the BNF converter

import AbsJanÅ»akGramatyka
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Show a => Program a -> Result
transProgram x = case x of
  ProgramDef _ funcdecls -> failure x
transFuncDecl :: Show a => FuncDecl a -> Result
transFuncDecl x = case x of
  FunDef _ type_ ident args block -> failure x
transArg :: Show a => Arg a -> Result
transArg x = case x of
  ArgDef _ type_ ident -> failure x
transStmt :: Show a => Stmt a -> Result
transStmt x = case x of
  FunToStmt _ funcdecl -> failure x
  EmptySt _ -> failure x
  StmToB _ block -> failure x
  Decl _ type_ items -> failure x
  ModToStmt _ modifystmt -> failure x
  Ret _ expr -> failure x
  VRet _ -> failure x
  If _ expr block -> failure x
  IfElse _ expr block1 block2 -> failure x
  While _ expr block -> failure x
  ForPscl _ ident expr1 expr2 block -> failure x
  SExp _ expr -> failure x
  Break _ -> failure x
  Continue _ -> failure x
transExpIdent :: Show a => ExpIdent a -> Result
transExpIdent x = case x of
  ArrIdent _ ident expr -> failure x
  NormalIdent _ ident -> failure x
transBlock :: Show a => Block a -> Result
transBlock x = case x of
  BlockDef _ stmts -> failure x
transItem :: Show a => Item a -> Result
transItem x = case x of
  Init _ ident expr -> failure x
  EmpInit _ ident -> failure x
transModifyStmt :: Show a => ModifyStmt a -> Result
transModifyStmt x = case x of
  Assign _ expident expr -> failure x
  Incr _ expident -> failure x
  Decr _ expident -> failure x
transType :: Show a => Type a -> Result
transType x = case x of
  Int _ -> failure x
  Str _ -> failure x
  Bool _ -> failure x
  Void _ -> failure x
  Array _ type_ expr -> failure x
transExpr :: Show a => Expr a -> Result
transExpr x = case x of
  EVar _ expident -> failure x
  ELitInt _ integer -> failure x
  ELitTrue _ -> failure x
  ELitFalse _ -> failure x
  EApp _ ident exprs -> failure x
  EString _ string -> failure x
  Neg _ expr -> failure x
  Not _ expr -> failure x
  EMul _ expr1 strop expr2 -> failure x
  EAdd _ expr1 weakop expr2 -> failure x
  ERel _ expr1 relop expr2 -> failure x
  EAnd _ expr1 expr2 -> failure x
  EOr _ expr1 expr2 -> failure x
transWeakOp :: Show a => WeakOp a -> Result
transWeakOp x = case x of
  Plus _ -> failure x
  Minus _ -> failure x
transStrOp :: Show a => StrOp a -> Result
transStrOp x = case x of
  Mul _ -> failure x
  Div _ -> failure x
  Mod _ -> failure x
transRelOp :: Show a => RelOp a -> Result
transRelOp x = case x of
  Less _ -> failure x
  LessOrEq _ -> failure x
  Greater _ -> failure x
  GrtOrEq _ -> failure x
  Eq _ -> failure x
  NotEq _ -> failure x

